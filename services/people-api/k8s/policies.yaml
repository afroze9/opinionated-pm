apiVersion: v1
kind: ConfigMap
metadata:
  name: people-api-acl-policies
  namespace: consul
data:
  kv-people-api.hcl: |
    key_prefix "people-api/" {
      policy = "read"
      policy = "write"
      policy = "list"
    }

    key_prefix "nexus-service/" {
      policy = "read"
      policy = "write"
      policy = "list"
    }

---

apiVersion: batch/v1
kind: Job
metadata:
  name: apply-people-api-policy
  namespace: consul
spec:
  template:
    spec:
      containers:
        - name: apply-people-api-policy
          image: afroze9/nexus-job
          command: ["/bin/sh", "-c"]
          args:
            - |
              #!/bin/bash
              CONSUL_ADDR="http://consul:8500"
              CONSUL_TOKEN=${CONSUL_HTTP_TOKEN}
              POLICY_NAME="kv-people-api"
              DESCRIPTION="Policy for people-api key prefix"
              HCL_RULES=$(cat /consul/config/kv-people-api.hcl | jq -Rs '.')
              POLICY_JSON_PAYLOAD="{ \"Name\": \"$POLICY_NAME\", \"Description\": \"$DESCRIPTION\", \"Rules\": $HCL_RULES }"
              
              # Check if policy exists
              POLICY_ID=$(curl -s -H "X-Consul-Token: $CONSUL_TOKEN" "$CONSUL_ADDR/v1/acl/policies?token=$CONSUL_TOKEN" | jq -r --arg POLICY_NAME "$POLICY_NAME" '.[] | select(.Name==$POLICY_NAME) | .ID')
              
              # Create policy if it does not exist
              if [ -z "$POLICY_ID" ]; then
                curl -X PUT -H "Content-Type: application/json" -H "X-Consul-Token: $CONSUL_TOKEN" -d "$POLICY_JSON_PAYLOAD" "$CONSUL_ADDR/v1/acl/policy?token=$CONSUL_TOKEN"
              fi  
              
              # Check if token exists
              TOKEN_EXISTS=$(curl -s -H "X-Consul-Token: $CONSUL_TOKEN" "$CONSUL_ADDR/v1/acl/tokens?token=$CONSUL_TOKEN" | jq -r --arg POLICY_NAME "$POLICY_NAME" '.[] | select(.Policies[].Name==$POLICY_NAME) | .SecretID')
              
              # Create token if it does not exist
              if [ -z "$TOKEN_EXISTS" ]; then
                TOKEN_JSON_PAYLOAD="{ \"Description\": \"Token for people-api\", \"Policies\": [ { \"Name\": \"$POLICY_NAME\" } ], \"ServiceIdentities\": [ { \"ServiceName\": \"people-api\" } ] }"
                TOKEN_RESPONSE=$(curl -X PUT -H "Content-Type: application/json" -H "X-Consul-Token: $CONSUL_TOKEN" -d "$TOKEN_JSON_PAYLOAD" "$CONSUL_ADDR/v1/acl/token?token=$CONSUL_TOKEN")
                NEW_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.SecretID')
                kubectl create secret generic people-api-token --from-literal=token=$NEW_TOKEN -n consul --dry-run=client -o yaml | kubectl apply -f -
              fi
          env:
            - name: CONSUL_HTTP_TOKEN
              valueFrom:
                secretKeyRef:
                  name: consul-secrets
                  key: consul-management-token
          volumeMounts:
            - name: config
              mountPath: /consul/config
      volumes:
        - name: config
          configMap:
            name: people-api-acl-policies
        - name: people-api-secrets-volume
          secret:
            secretName: people-api-secrets
      restartPolicy: Never
