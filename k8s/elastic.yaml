apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: nexus
spec:
  serviceName: elasticsearch
  replicas: 1 # You can scale this as needed
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      namespace: nexus
      labels:
        app: elasticsearch
    spec:
      initContainers:
        - name: sysctl
          image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
          securityContext:
            privileged: true
            runAsUser: 0
          command: ["sh", "-c", "sysctl -w vm.max_map_count=262144"]
        - name: es-setup
          image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
          command:
            - "/bin/bash"
            - "-c"
            - |
              #!/bin/bash

              # Exit if no ELASTIC_PASSWORD is set
              if [ -z "${ELASTIC_PASSWORD}" ]; then
                echo "Set the ELASTIC_PASSWORD environment variable."
                exit 1
              fi

              # Check if the CA already exists, create if it doesn't
              if [ ! -f /usr/share/elasticsearch/config/certs/ca/ca.crt ]; then
                echo "Creating CA"
                elasticsearch-certutil ca --silent --pem -out /usr/share/elasticsearch/config/certs/ca.zip
                unzip /usr/share/elasticsearch/config/certs/ca.zip -d /usr/share/elasticsearch/config/certs
              fi

              # Check if the certificate already exists, create if it doesn't
              if [ ! -f /usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt ]; then
                echo "Creating certs"
                echo -ne \
                "instances:\n"\
                "  - name: elasticsearch\n"\
                "    dns:\n"\
                "      - elasticsearch\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                > /usr/share/elasticsearch/config/certs/instances.yml
                elasticsearch-certutil cert --silent --pem -out /usr/share/elasticsearch/config/certs/certs.zip --in /usr/share/elasticsearch/config/certs/instances.yml --ca-cert /usr/share/elasticsearch/config/certs/ca/ca.crt --ca-key /usr/share/elasticsearch/config/certs/ca/ca.key
                unzip /usr/share/elasticsearch/config/certs/certs.zip -d /usr/share/elasticsearch/config/certs
              fi

              # Set file permissions
              echo "Setting file permissions"
              chown -R root:root /usr/share/elasticsearch/config/certs
              find /usr/share/elasticsearch/config/certs -type d -exec chmod 750 {} \;
              find /usr/share/elasticsearch/config/certs -type f -exec chmod 640 {} \;
          volumeMounts:
            - name: certs
              mountPath: /usr/share/elasticsearch/config/certs
          env:
            - name: "ELASTIC_PASSWORD"
              value: "dev123"
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
          ports:
            - containerPort: 9200
          volumeMounts:
            - name: certs
              mountPath: /usr/share/elasticsearch/config/certs
            - name: data
              mountPath: /usr/share/elasticsearch/data
          env:
            - name: "ELASTIC_PASSWORD"
              value: "dev123"
            - name: node.name
              value: elasticsearch
            - name: cluster.name
              value: my-elastic-cluster
            - name: cluster.initial_master_nodes
              value: elasticsearch
            - name: xpack.security.enabled
              value: "true"
            - name: xpack.security.http.ssl.enabled
              value: "true"
            - name: xpack.security.http.ssl.key
              value: "/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.key"
            - name: xpack.security.http.ssl.certificate
              value: "/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt"
            - name: xpack.security.http.ssl.certificate_authorities
              value: "/usr/share/elasticsearch/config/certs/ca/ca.crt"
            - name: xpack.security.transport.ssl.enabled
              value: "true"
            - name: xpack.security.transport.ssl.verification_mode
              value: "certificate"
            - name: xpack.security.transport.ssl.key
              value: "/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.key"
            - name: xpack.security.transport.ssl.certificate
              value: "/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt"
            - name: xpack.security.transport.ssl.certificate_authorities
              value: "/usr/share/elasticsearch/config/certs/ca/ca.crt"
            - name: ES_JAVA_OPTS
              value: "-Xmx1g -Xms1g" # Adjust according to your needs
      volumes:
        - name: certs
          emptyDir: {}
        - name: data
          persistentVolumeClaim:
            claimName: elasticsearch-data
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-ext
  namespace: nexus
spec:
  type: LoadBalancer
  selector:
    app: elasticsearch
  ports:
    - port: 9201
      targetPort: 9200
      name: https

---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: nexus
spec:
  selector:
    app: elasticsearch
  ports:
    - port: 9200
      targetPort: 9200
      name: https
  type: NodePort

