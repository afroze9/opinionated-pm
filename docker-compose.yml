version: '3'

services:
##AUTOGENERATED_DO_NOT_DELETE##
##SERVICES_START##
  people-db:
    container_name: people-db
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=developer
      - POSTGRES_PASSWORD=dev123
      - POSTGRES_DB=nexus_people
      - PGPORT=${PEOPLE_DB_PORT}
    ports:
      - ${PEOPLE_DB_PORT}:${PEOPLE_DB_PORT}
    volumes:
      - people-db:/var/lib/postgresql/data
    networks:
      - people-db

  people-api:
    image: nexus-people-api:latest
    depends_on:
      - people-db
    restart: always
    deploy:
      replicas: 1
    expose:
      - ${PEOPLE_API_PORT_EXTERNAL}
    environment:
      - ConsulKV:Url=http://consul-server1:8500
      - ConsulKV:Token=${PEOPLE_API_TOKEN}
      - Consul:Host=consul-server1
      - GlobalConfiguration:BaseUrl=http://localhost:${PEOPLE_API_PORT_INTERNAL}
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_HTTPS_PORT=443
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${PEOPLE_API_CERT_PASSWORD}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      - ConnectionStrings:Default=${PEOPLE_DB_CONNECTION_STRING}
    volumes:
      - .\devcerts:/https/
    networks:
      - econsul
      - people-api
      - people-db
      - logs
      - tracing
      - api-gateway


##SERVICES_END##
##AUTOGENERATED_DO_NOT_DELETE##

  company-db:
    container_name: company-db
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=developer
      - POSTGRES_PASSWORD=dev123
      - POSTGRES_DB=project_management_company
      - PGPORT=${COMPANY_DB_PORT}
    ports:
      - ${COMPANY_DB_PORT}:${COMPANY_DB_PORT}
    volumes:
      - company-db:/var/lib/postgresql/data
    networks:
      - company-db

  project-db:
    container_name: project-db
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=developer
      - POSTGRES_PASSWORD=dev123
      - POSTGRES_DB=project_management_project
      - PGPORT=${PROJECT_DB_PORT}
    ports:
      - ${PROJECT_DB_PORT}:${PROJECT_DB_PORT}
    volumes:
      - project-db:/var/lib/postgresql/data
    networks:
      - project-db

  api-gateway:
    container_name: api-gateway
    image: nexus-api-gateway:latest
    restart: always
    ports:
      - ${API_GATEWAY_PORT_EXTERNAL}:443
    environment:
      - ConsulKV:Url=http://consul-server1:8500
      - ConsulKV:Token=${API_GATEWAY_TOKEN}
      - Consul:Host=consul-server1
      - GlobalConfiguration:ServiceDiscoveryProvider:Host=consul-server1
      - GlobalConfiguration:ServiceDiscoveryProvider:Token=${API_GATEWAY_TOKEN}
      - GlobalConfiguration:BaseUrl=http://localhost:${API_GATEWAY_PORT_INTERNAL}
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_HTTPS_PORT=443
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${API_GATEWAY_CERT_PASSWORD}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - .\devcerts:/https/
    networks:
      - econsul
      - project-api
      - company-api
      - logs
      - tracing
      - api-gateway

  company-api:
    image: nexus-company-api:latest
    depends_on:
      - company-db
    restart: always
    deploy:
      replicas: 1
    expose:
      - ${COMPANY_API_PORT_EXTERNAL}
    environment:
      - ConsulKV:Url=http://consul-server1:8500
      - ConsulKV:Token=${COMPANY_API_TOKEN}
      - Consul:Host=consul-server1
      - GlobalConfiguration:BaseUrl=http://localhost:${COMPANY_API_PORT_INTERNAL}
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_HTTPS_PORT=443
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${COMPANY_API_CERT_PASSWORD}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      - ConnectionStrings:Default=${COMPANY_DB_CONNECTION_STRING}
    volumes:
      - .\devcerts:/https/
    networks:
      - econsul
      - project-api
      - company-api
      - company-db
      - logs
      - tracing
      - api-gateway
      - health-checks

  project-api:
    image: nexus-project-api:latest
    depends_on:
      - project-db
    restart: always
    deploy:
      replicas: 1
    expose:
      - ${PROJECT_API_PORT_EXTERNAL}
    environment:
      - ConsulKV:Url=http://consul-server1:8500
      - ConsulKV:Token=${PROJECT_API_TOKEN}
      - Consul:Host=consul-server1
      - GlobalConfiguration:BaseUrl=http://localhost:${PROJECT_API_PORT_INTERNAL}
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_HTTPS_PORT=443
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${PROJECT_API_CERT_PASSWORD}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      - ConnectionStrings:Default=${PROJECT_DB_CONNECTION_STRING}
    volumes:
      - .\devcerts:/https/
    networks:
      - econsul
      - project-api
      - project-db
      - logs
      - tracing
      - api-gateway

  frontend-app:
    container_name: frontend-app
    image: nexus-frontend-app:latest
    ports:
      - 3000:3000
    networks:
      - api-gateway

  health-checks-dashboard:
    container_name: health-checks-dashboard
    image: nexus-health-checks-dashboard:latest
    environment:
      - ConsulKV:Url=http://consul-server1:8500
      - ConsulKV:Token=${HEALTH_CHECKS_DASHBOARD_TOKEN}
      - Consul:Host=consul-server1
      - GlobalConfiguration:BaseUrl=http://localhost:${HEALTH_CHECKS_DASHBOARD_PORT_INTERNAL}
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_HTTPS_PORT=443
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${HEALTH_CHECKS_DASHBOARD_CERT_PASSWORD}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    ports:
      - ${HEALTH_CHECKS_DASHBOARD_PORT_EXTERNAL}:443
    networks:
      - health-checks
      - econsul
    volumes:
      - .\devcerts:/https/

  jaeger:
    image: jaegertracing/all-in-one:latest
    depends_on:
      - prometheus
    ports:
      - 13133:13177
      - 16686:16686
      - 4317:4317
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug
      - METRICS_STORAGE_TYPE=prometheus
    networks:
      - tracing

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    networks:
      - tracing
    volumes:
      - prometheus:/prometheus
      - ./prometheus.docker.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: grafana/grafana:latest
    ports:
      - 3900:3000
    environment:
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./grafana-config/datasource-config/prometheus.yaml:/etc/grafana/provisioning/datasources/prometheus.yaml
      - ./grafana-config/dashboard-config/nexus-metrics.yaml:/etc/grafana/provisioning/dashboards/nexus-metrics.yaml
      - ./grafana-config/dashboards/nexus-metrics.json:/var/lib/grafana/dashboards/nexus-metrics.json
      - grafana:/var/lib/grafana
    networks:
      - tracing
  
  es-setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - logs

  company-postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    ports:
      - 9187:9187
    environment:
      - DATA_SOURCE_NAME=user=developer password=dev123 host=company-db port=5438 dbname=project_management_company sslmode=disable
    networks:
      - company-db
      - tracing
  
  project-postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    ports:
      - 9188:9187
    environment:
      - DATA_SOURCE_NAME=user=developer password=dev123 host=project-db port=5439 dbname=project_management_project sslmode=disable
    networks:
      - project-db
      - tracing

  es01:
    depends_on:
      es-setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - logs

networks:
##AUTOGENERATED_DO_NOT_DELETE##
##NETWORKS_START##
  people-api:
    driver: bridge
  people-db:
    driver: bridge
##NETWORKS_END##
##AUTOGENERATED_DO_NOT_DELETE##
  api-gateway:
    driver: bridge
  company-api:
    driver: bridge
  company-db:
    driver: bridge
  project-api:
    driver: bridge
  project-db:
    driver: bridge
  tracing:
    driver: bridge
  logs:
    driver: bridge
  health-checks:
    driver: bridge
  econsul:
    external:
      name: consul_external

volumes:
##AUTOGENERATED_DO_NOT_DELETE##
##VOLUMES_START##
  people-db:
    driver: local
##VOLUMES_END##
##AUTOGENERATED_DO_NOT_DELETE##
  company-db:
    driver: local
  project-db:
    driver: local
  certs:
    driver: local
  esdata01:
    driver: local
  prometheus:
    driver: local
  grafana:
    driver: local